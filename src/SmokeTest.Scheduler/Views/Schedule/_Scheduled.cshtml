@model SmokeTest.Scheduler.Models.TestRunViewModels
@{
    string overallStatus = "status-success";

    if (Model.Errors > 0)
        overallStatus = "status-error";
    else if (Model.Warnings > 0)
        overallStatus = "status-warning";
    else if (Model.NotRun > 0)
        overallStatus = "status-notrun";
}
<div class="card">
    <div class="card-header">
        Test Summary
    </div>
    <div class="card-body @overallStatus">
        <div class="run-schedule-card">
            <p>Total Tests: <span>@Model.RunModels.Count</span></p>
            <p>Errors: <span>@Model.Errors</span></p>
            <p>Warnings: <span>@Model.Warnings</span></p>
            <p>Not Ran: <span>@Model.NotRun</span></p>
            <p>Running: <span>@Model.Running</span></p>
            <p>Queued: <span>@Model.Queued</span></p>
        </div>
    </div>
</div>
@foreach (SmokeTest.Scheduler.Models.TestRunViewModel runModel in Model.RunModels)
{
    int futureCounter = 0;
    string lastRun = "Never";

    if (runModel.LastRun.HasValue)
        lastRun = runModel.LastRun.Value.ToLocalTime().ToString(System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat);

    string status = "status-success";

    if (runModel.LastRunResult == SmokeTest.Shared.LastRunResult.Error)
        status = "status-error";
    else if (runModel.LastRunResult == SmokeTest.Shared.LastRunResult.Warning)
        status = "status-warning";
    else if (runModel.LastRunResult == SmokeTest.Shared.LastRunResult.NotRun)
        status = "status-notrun";
    <div class="card">
        <div class="card-header">
            @runModel.TestName
        </div>
        <div class="card-body">
            <div class="run-schedule-card">
                <p class="@status">Last Run: @lastRun</p>
                <p>Next Run: @runModel.NextRun.ToLocalTime()</p>
                <p class="@runModel.LastRunResult.ToString()">
                    @runModel.ConfigurationName
                    @foreach (var item in runModel.UniqueRunIdentifiers)
                    {
                        futureCounter++;
                        DateTime startTime = new DateTime(item.Start);
                        string elapsed = Model.FormatElapsedTime(DateTime.UtcNow - startTime);
                        string estimatedRemain = Model.FormatElapsedTime(startTime.AddSeconds(item.EstimatedTime) - DateTime.UtcNow);
                        string estimatedTotal = Model.FormatElapsedTime(TimeSpan.FromSeconds(item.EstimatedTime));

                        string tooltip = String.Format("Test Running\r\n\r\nStarted: {0}\r\nElapsed: {1}\r\nEstimated Total: {2}\r\nEstimated Remaining: {3}",
                            startTime.ToLocalTime().ToShortTimeString(), elapsed, estimatedTotal, estimatedRemain);
                        <a href="/Reports/TestRunProgress/@item.UniqueId/"><span class="testRunItem" title="@tooltip">R</span></a>

                        if (futureCounter > 9)
                            break;
                    }
                    @foreach (SmokeTest.Engine.TestQueueItem item in runModel.QueuePositions)
                    {
                        futureCounter++;

                        <a href="/Schedule/ViewQueueItem/@item.QueueId"><span class="queueItem" title="Test run Queud at position @item.Position">Q</span></a>

                        if (futureCounter > 9)
                            break;
                    }
                </p>

                <div class="prev-results">
                    @for (int i = runModel.ReportSummaries.Length - 1; i >= 0; i--)
                    {
                        SmokeTest.Shared.ReportSummary summary = runModel.ReportSummaries[i];
                        var longest = runModel.ReportSummaries.OrderByDescending(o => o.TotalTime).Take(1);
                        string prevStatus = "prev-status-success";

                        if (summary.RunResult == SmokeTest.Shared.LastRunResult.Error)
                            prevStatus = "prev-status-error";
                        else if (summary.RunResult == SmokeTest.Shared.LastRunResult.Warning)
                            prevStatus = "prev-status-warning";

                        double top = (100 - summary.TimePercentage) / 3;
                        double height = summary.TimePercentage / 3;
                        string summaryStyle = $"height:{height}px;margin-top:{top}px;";
                        string tooltip = String.Format("Test Results\r\n\r\nStarted: {0}\r\nFinished: {1}\r\nTotal Requests: {2}\r\nResult: {3}",
                            summary.StartTime.ToLocalTime().ToString(System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat),
                            summary.EndTime.ToLocalTime().ToString(System.Threading.Thread.CurrentThread.CurrentUICulture.DateTimeFormat),
                            summary.TotalRequests, summary.RunResult);

                        <a href="/Reports/TestSummary/@summary.ReportId.ToString("X")/@summary.TestId.ToString("X")/"><span class="@prevStatus" style="@summaryStyle" title="@tooltip"></span></a>

                    }
                </div>

                @if (Model.IsUserLoggedIn)
                {
                    <span class="runButton"><input type="button" class="btn btn-primary" onclick="runTest('@runModel.UniqueId');" value="Run" /></span>
                }
                else
                {
                    <span class="runButton"><input type="button" class="btn btn-primary disabled" value="Run" /></span>
                }
            </div>
        </div>
    </div>
}
<script type="text/javascript">
    function runTest(id) {
        $.ajax({
            type: 'GET',
            url: '/Schedule/RunTest/' + id + '/' + @Model.Position + '/',
            cache: false,
            success: function (response) {
                if (response.testScheduled && response.update) {
                    divName = "#divHomecard" + response.id;
                    updateDynamicData(divName, response.url);
                }
            },
        })
    };
</script>